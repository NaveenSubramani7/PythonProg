# 1. Create 2 variables with x as 100 & y as 10 respectively and find the Multiplication and division of both and store in some val as z and z1.
import string

print("CASE 1 BEGIN")
x = 100
y = 10
z = x * y
print(f"Multiple of {x} * {y} : {z}")
print(z)
z1 = x / y
print(f"Divisible of {x} / {y} : {z1}")
print(z1)
print("CASE 1 END")
print("======================================================")
#2. Create a as 2000 and find the division of a by y (created in step 1) and reassign a with the divided result (200).
print("CASE 2 BEGIN")
a = 2000
print(f"Divisible of {a} / {y} ")
a /= y
print(a)
print("CASE 2 END")
print("======================================================")

#3. Prove Python is Dynamically Typed Language: Create x:int=100, then assign the x to y, but the datatype of y has to be of type string. (think about using some function like str()).
# Print the type of y and x
print("CASE 3 BEGIN")
x1: int = 100
y1 = str(x1)
print(f"The value of y1 is {y1} and the type of y1 is {type(y1)}")
print(f"The value of x1 is {x1} and the type of x1 is {type(x1)}")
print("CASE 3 END")
print("======================================================")

# 4. Prove Python has dynamic inference feature
print("CASE 4 BEGIN")
w1, v1, u1 = 10.2, 10, "example"
print(f"The value of w1 is {w1} and the type of w1 is {type(w1)}")
print(f"The value of v1 is {v1} and the type of v1 is {type(v1)}")
print("The value of u1 is \"{0}\" and the type of u1 is {1}".format(u1, str(type(u1))))
print("CASE 4 END")
print("======================================================")

# 5. Prove Python is Strongly Typed Language
print("CASE 5 BEGIN")
try:
    t1 = w1 + u1
    print(t1)
except TypeError:
    print("As python is strongly typed, we cannot operate with float with string type")
    print(f"The value of w1 is {w1} and the type of w1 is {type(w1)}")
    print("The value of u1 is \"{0}\" and the type of u1 is {1}".format(u1, str(type(u1))))
print("CASE 5 END")
print("======================================================")
# 6. Create variables a,b,c,d assigned with 10,20,30,40 respectively
print("CASE 6 BEGIN")
a,b,c,d = 10,20,30,40
print(f"The value of a is {a}")
print(f"The value of b is {b}")
print(f"The value of c is {c}")
print(f"The value of d is {d}")
print("All the variables are assigned in one liner")
print("CASE 6 END")
print("======================================================")
# 7. Prove Python variables are case sensitive
print("CASE 7 BEGIN")
ant,Ant,ANT,anT = "small","InitCap","CAPS","lastCAP"
print(f"The value of ant is {ant}")
print(f"The value of Ant is {Ant}")
print(f"The value of ANT is {ANT}")
print(f"The value of anT is {anT}")
print("All the ant variable are different, this proves the python is case sensitive")
print("CASE 7 END")
print("======================================================")
# 8. Prove variable name can’t start with numbers or cannot contains special character other than _
print("CASE 8 BEGIN")
_ab = "_abc"
print("underscore is allowed as the first element of variable" + _ab)
#&ab = "&ab"
print("other than Underscore, special chars are not allowed as the first element of variable, example like &ab")
#1ab = "1ab"
print("Number is not allowed as the first element of variable, example like 1ab")
ab1 = "ab1&"
print("Number and character can be given after the first element for variable, example like ab1&")
print("CASE 8 END")
print("======================================================")
# 9. Show some examples of when do we use single, double and triple (single/double) quotes
print("CASE 9 BEGIN")
s_quote_char1 = 'a'
print("Single quote s_quote_char1 variable is " + s_quote_char1)
s_quote_char2 = 'abcd'
print("Single quote s_quote_char2 variable is " + s_quote_char2)
s_quote_char3 = 'abcd efgh'
print("Single quote s_quote_char3 variable is " + s_quote_char3)
s_quote_char4 = '"abcd efgh"'
print("Single quote s_quote_char4 variable is " + s_quote_char4)
s_quote_char5 = 'abcd \n efgh'
print("Single quote s_quote_char5 variable is " + s_quote_char5)
d_quote_char1 = "a"
print("Double quote d_quote_char1 variable is " + d_quote_char1)
d_quote_char2 = "abcd"
print("Double quote d_quote_char2 variable is " + d_quote_char2)
d_quote_char3 = "abcd efgh"
print("Double quote d_quote_char3 variable is " + d_quote_char3)
d_quote_char4 = "'abcd efgh'"
print("Double quote d_quote_char4 variable is " + d_quote_char4)
d_quote_char5 = "'abcd \n efgh'"
print("Double quote d_quote_char5 variable is " + d_quote_char5)
ts_quote_char1 = '''a
b
c
d'''
print("Double quote ts_quote_char1 variable is " + ts_quote_char1)
td_quote_char1 = """a
b
c
d"""
print("Double quote td_quote_char2 variable is " + td_quote_char1)
print("CASE 9 END")
print("======================================================")
# 10. Show an examples to use arithmetic, comparison, relational and logical operators.
print("CASE 10 BEGIN")
print("Arithmetic Operation")
print ("Addition of two values " + str(x + y))
print ("Subtraction of two values " + str(x - y))
print ("Multiple of two values " + str(x * y))
print ("Division of two values " + str(x/y))
print("comparison Operation")
if x > y:
    print("x is greater than y")
elif x < y:
    print("x is lesser than y")
else:
    print("x is equal to y")
print("Relation and logical Operation")
if 10 > 5 and 10 > 20:
    print("If both condition are satisfied then print this statement")
elif 10 > 50 or 10 > 20:
    print("If anyone condition is satisfied then print this statement")
elif not 10 > 20:
    print("If condition is not satisfied, then the not will make it as satisfied, then print this statement")
print("CASE 10 END")
print("======================================================")
#11. Write a program to find the greatest of 3 numbers
print("CASE 11 BEGIN")
print("Greatest of 3 Numbers!!!!")
first_value = input("Enter the first value")
second_value = input("Enter the second value")
third_value = input("Enter the third value")
if first_value > second_value and first_value > third_value:
    print(f"first value {first_value} is the greatest value then second {second_value} and third {third_value}")
elif second_value > third_value:
    print(f"second value {second_value} is the greatest value then first {first_value} and third {third_value}")
elif third_value > second_value:
    print(f"third value {third_value} is the greatest value then first {first_value} and second {second_value}")
elif first_value == second_value and first_value != third_value:
    print(f" First and second values are equal, first {first_value}, second value {second_value}, and third {third_value}")
elif second_value == third_value and second_value != first_value:
    print(f" second and third values are equal, first {first_value}, second value {second_value}, and third {third_value}")
elif first_value == third_value and first_value != second_value:
    print(f" first and third values are equal, first {first_value}, second value {second_value}, and third {third_value}")
else:
    print(f" All three values are equal, first {first_value}, second value {second_value}, and third {third_value}")
print("CASE 11 END")
print("======================================================")

#12. Write a single program to find the given number is even or whether it is negative and print the output as
# (the given number is even but not negative or the given number is not even but negative or the given number is neither negative nor even)
print("CASE 12 BEGIN")
print("Find the value is Even and Negative!!!!")
try:
    check_value = int(input("Enter the number:"))
    if check_value % 2 == 0:
        if check_value > 0:
            print(f"The given number is even and positive {check_value}")
        elif check_value < 0:
            print(f"The given number is even and negative {check_value}")
        else:
            print(f"The given number is zero {check_value}")
    else:
        if check_value > 0:
            print(f"The given number is odd and positive {check_value}")
        else:
            print(f"The given number is odd and negative {check_value}")
except Exception as errormsg:
    print("Value Error in the input, it has to be only number!!!!")

print("CASE 12 END")
print("======================================================")

# 13. Write a nested if then else to print the course fees - check if student choosing bigdata, then fees is 25000,
# if student choosing spark then fees is 15000, if the student choosing datascience then check if machinelearning then 25000 or if deep learning then 45000
# otherwise if both then 25000+25000.
print("CASE 13 BEGIN")
course_amt = [25000, 15000, 25000, 45000]
sel_course = int(input("Enter the course \n"
                   "From the below course choose 1 for BIGDATA, 2 for SPARK and 3 for DATASCIENCE: "))
if sel_course == 1:
    print("Your fees for BIGDATA is: " + str(course_amt[0]))
elif sel_course == 2:
    print("Your fees for SPARK is: " + str(course_amt[1]))
elif sel_course == 3:
    sub_sel_course = int(input("Enter the sub course \n"
                   "Choose 1 for MACHINELEARNING, 2 for DEEPLEARNING and 3 for both:"))
    if sub_sel_course == 1:
        print("Your fees for MACHINELEARNING is: " + str(course_amt[2]))
    elif sub_sel_course == 2:
        print("Your fees for DEEPLEARNING is: " + str(course_amt[3]))
    elif sub_sel_course == 3:
        amt= course_amt[2] + course_amt[3]
        print("Your fees for MACHINELEARNING and DEEPLEARNING is: " + str(amt))
    else:
        print("Entered sub course is not valid!!!!!")
else:
    print("Entered course is not valid!!!!!")
print("CASE 13 END")
print("======================================================")

# 14. Check whether the given string is palindrome or not (try to use some function like reverse).
# For eg: x="madam" and y=”madam”, if x matches with y then print as "palindrome" else "not a  palindrome".
print("CASE 14 BEGIN")
check_string_value = input("Enter the string value to check the palindrome")
len_value = len(check_string_value)
i = 0
palindrome: str = "true"
for idx in range(0, len_value):
    if check_string_value[idx] == check_string_value[len_value - 1 - i]:
        palindrome = "true"
    else:
        palindrome = "false"
        break
    i = i + 1
if palindrome == "true":
    print("The given string is palindrome")
else:
    print("The given string is not palindrome")
print("CASE 14 END")
print("======================================================")

#15. Check whether the val x=100 is an integer or string. (try to use some functions like str or upper function etc to execute this use case)
# or use isinstanceof(variablename,datatype) function.
print("CASE 15 BEGIN")

x = str(input("Enter any value:"))
if isinstance(x, int):
    print("Entered number is int!!")
elif isinstance(x, type(x)):
    print("Entered number is string!!")
print("CASE 15 END")
print("======================================================")
#16. Create a list with a range of 10 values starting from 2 to 11 and prove mutability by updating the 3rd element with 100 and prove resizable properties by adding 100 in the 5th position.
print("CASE 16 BEGIN")
lst_nums = list(range(2,12))
print("The value of list is")
print(lst_nums)
lst_nums[2] = 100
lst_nums.insert(4, 100)
print("The new value of list is")
print(lst_nums)
print("CASE 16 END")
print("======================================================")
#17. Create a tuple of 2 fields eg. ("Inceptez","Technologies","Pvt","Ltd"), prove immutability and non resizable nature, access the 2nd and 4th fields and store in another tuple.
print("CASE 17 BEGIN")
tup_str = ("Inceptez","Technologies","Pvt","Ltd")
try:
    tup_str[2] = "TECHNOLOGIES"
except TypeError as error_msg:
    print("Tuple is immutable" + str(error_msg))
try:
    tup_str.insert(4,"CHENNAI")
except AttributeError as error_msg:
    print("Tuple is non-resizable" + str(error_msg))
org_list = list(tup_str)
new_list = [org_list.__getitem__(1),org_list.__getitem__(3)]
new_tup = tuple(new_list)
print("The new value of tuple are")
print(new_tup)
print("CASE 17 END")
print("======================================================")
# 18. Convert the list of tuples [("Inceptez","Technologies"),("Apple","Incorporation")] to list of dictionary type,
# using for loop as given below [{"Inceptez":"Technologies"},{"Apple":"Incorporation"}] , once the list of dictionary is arrived print only "Incorporation"
# by passing "Apple" as a key using dict["Apple"] and dict.get("Apple") and try with dict["Apple1"] and dict.get("Apple1")
# then find the difference between get and using[] notation.
print("CASE 18 BEGIN")
lst_tup = [("Inceptez", "Technologies"), ("Apple", "Incorporation")]
lst_dict = list(dict(""))
for i in lst_tup:
    temp_dict = {i[0] : i[1]}
    lst_dict.append(temp_dict)
print("Print the List of dictionary:")
print(lst_dict)
val1 = lst_dict[1]['Apple']
print("Print the value for the key 'Apple' :" + val1)
val2 = lst_dict[1].get('Apple')
print("Print the value for the key 'Apple' :" + val2)
try:
    val3 = lst_dict[1]['Apple1']
except KeyError as kyerr:
    print("when we access the dict element directly with key, we will get keyerror if key is not found!!!")
val4 = lst_dict[1].get('Apple1')
print("When we access the dict element with get fn and if the key is not found, it will not throw an error!!!")
print("CASE 18 END")
print("======================================================")
#19. Create a list of tuple as given below and delete all duplicate tuples of the list
# lst=[("Inceptez","Technologies"),("Apple","Incorporation"),("Inceptez","Technologies"),("Inceptez","Technologies")]
print("CASE 19 BEGIN")
lst_tup = [("Inceptez","Technologies"),("Apple","Incorporation"),("Inceptez","Technologies"),("Inceptez","Technologies"),("Andriod","Incorp"),("Apple","Incorporation")]
new_lst_tup = list(set(lst_tup))
print(new_lst_tup)
print("CASE 19 END")
print("======================================================")
#20. Append ("Intel","Corp") in the above de duplicated list
print("CASE 20 BEGIN")
new_lst_tup.insert(len(new_lst_tup),("Intel","Corp"))
print(new_lst_tup)
print("CASE 20 END")
print("======================================================")
##21. Convert the lst_dict= [{"Inceptez":"Technologies"},{"Apple":"Incorporation"}]
# to lst1=["Inceptez","Apple"] , think about using for loop, list() function,
# keys function and list append functions to achieve this.
print("CASE 21 BEGIN")
lst_dict = [{"Inceptez":"Technologies"},{"Apple":"Incorporation"}]
lst1:list = []
for i in lst_dict:
    if len(lst1) == 0:
        lst1 = list(i.keys())
    else:
        lst1.append(list(i.keys()))
print(lst1)
print("CASE 21 END")
print("======================================================")
#22. Create a list of values lst=[10,20,40,30,20], find the first, last values of the list,
# sort the list in ascending order, sort in descending order,
# print the minumum and maximum values of the descending sorted list,
# find the sum of all elements in the list, remove the number 30 and 20 from the list.
print("CASE 22 BEGIN")
lst=[10,20,40,30,20]
print("First value of the lst " + str(lst.__getitem__(0)))
print("Last value of the lst " + str(lst[len(lst)-1]))
lst.sort(reverse=False)
asc_list = lst
print("Sorted the list in ascending order " + str(asc_list))
lst.sort(reverse=True)
desc_list = lst
print("Sorted the list in descending order " + str(desc_list))
print("Maximum value of the list " + str(desc_list[0]))
print("Minimum value of the list " + str(desc_list[len(desc_list) - 1]))
sumval = 0
for i in lst:
    sumval += i
print("Sum of values of the list {}".format(sumval))
lst = list(set(lst)) # since 20 is twice present in the list, usng set to remove the duplicate
lst.remove(30)
lst.remove(20)
print("new list after removing 20 and 30 is {}".format(lst))
print("CASE 22 END")
print("======================================================")
#23. Do the above same (step 22) operation in the tuple of elements tup=(10,20,40,30,20)
print("CASE 23 BEGIN")
tup=(10,20,40,30,20)
print("First value of the tuple " + str(tup.__getitem__(0)))
print("Last value of the tuple " + str(tup[len(tup)-1]))
lst = list(tup)
lst.sort(reverse=False)
asc_tup = tuple(lst)
print("Sorted the tuple in ascending order " + str(asc_tup))
lst = list(tup)
lst.sort(reverse=True)
desc_tup = tuple(lst)
print("Sorted the tuple in descending order " + str(desc_tup))
print("Maximum value of the list " + str(desc_tup[0]))
print("Minimum value of the list " + str(desc_tup[len(desc_tup) - 1]))
sumval = 0
for i in tup:
    sumval += i
print("Sum of values of the list {}".format(sumval))
lst = list(set(tup)) # since 20 is twice present in the list, using set to remove the duplicate
lst.remove(30)
lst.remove(20)
tup = tuple(lst)
print("new tup after removing 20 and 30 is {}".format(lst))
print("CASE 23 END")
print("======================================================")
#24. Convert the string to list from str1="Inceptez Technologies Pvt Ltd"
# to lst_str1=['Inceptez', 'Technologies', 'Pvt', 'Ltd']
print("CASE 24 BEGIN")
str1="Inceptez Technologies Pvt Ltd"
lst = str1.split(" ")
print(lst)
print("CASE 24 END")
print("======================================================")
#25. With the below given data in the format of list(list(elements))
#emplstlst= [["1", ("Arun","Kumar"), "10000"],["2", ("Bala","Mohan"), "12000"]]
#Display the below output for all of the 5 given simple scenarios
print("CASE 25 BEGIN")
#a. Convert the first element of the above list into tuple
#("1", ("Arun","Kumar"), "10000")
emplstlst= [["1", ("Arun","Kumar"), "10000"],["2", ("Bala","Mohan"), "12000"]]
a_tup = tuple(emplstlst[0])
print("Print the first element of list as tuple : {} " .format(a_tup))
#b. Print the second element's second element and reverse the first and last name as given below
#("Mohan","Bala")
nested_list = list(emplstlst[1][1])
nested_list.reverse()
emplstlst[1][1] = nested_list
print("Print the second element of list as tuple with name change inside the nested tuple: {} " .format(tuple(emplstlst[1])))
#c. Convert the emplstlst into tuples(tuples)
#emplstlst= (("1", ("Arun","Kumar"), "10000"),("2", ("Bala","Mohan"), "12000"))
emptuple = (tuple(emplstlst[0]),tuple(emplstlst[1]))
print(emptuple)
#d. Add all salary of the above list #22000
emplst = [list(emptuple[0]), list(emptuple[1])]
j = 0
for i in emplst:
    emplst[j][2] = int(i[2]) + 22000
    j += 1
print(tuple(emplst))
print("CASE 25 END")
print("======================================================")
#26. Write a program using for loop to print even numbers and odd numbers in the below range of data (generate using range function) [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
# output should be with even as 6,8,10,12,14,16,18,20 and odd as 5,7,9,11,13,15,17,19.
print("CASE 26 BEGIN")
evn_lst = []
odd_lst = []
for i in range(5,21):
    if i%2 == 0:
        evn_lst.insert(len(evn_lst), i)
    else:
        odd_lst.insert(len(odd_lst), i)
print("The even numbers are {}".format(evn_lst))
print("The odd numbers are {}".format(odd_lst))
print("CASE 26 END")
print("======================================================")
#27. Write a while loop to loop from 0 till 21 with the increment of 3, the result should be exactly 3,6,9,12,15,18 and store this result in a list
print("CASE 27 BEGIN")
i=0
lst = []
while(i<21):
    i+=3
    if(i<21):
       lst.insert(len(lst), i)
print("The value of the lst is {}".format(lst))
print("CASE 27 END")
print("======================================================")
#28. Write a for or while loop to print the cube of 4, result should be 4*4*4=64 (initiate some variable outside the loop with 4 and loop through 3 times to achieve the result)
print("CASE 28 BEGIN")
val=int(input("Enter the value to cube:"))
i=1
cube_value = 1
while(i<=3):
    cube_value = cube_value * val
    i+=1
print(cube_value)
print("CASE 28 END")
print("======================================================")
#29. Create a list as sal_lst=[10000,20000,30000,10000,15000], loop through the list and add 1000 bonus to the salary and store in another list sal_bonus_lst=[11000,21000,31000,11000,16000]
#then store the bonus applied salary in another list where sal>11000
print("CASE 29 BEGIN")
sal_lst=[10000,20000,30000,10000,15000]
new_sal_lst=[]
for i in sal_lst:
    new_sal_lst.insert(len(new_sal_lst), i + 1000)
print(new_sal_lst)
print("CASE 29 END")
print("======================================================")
#30. Write a do while loop to print “Inceptez technologies” n number of times as per the input you get from the user. Minimum it has to be printed at least one time regardless of the user input.
print("CASE 30 BEGIN")
cnt = int(input("Enter the number of times, you want to see the company name:"))
while(True):
    print("Inceptez technologies")
    if(cnt==1 or cnt<=0):
        break;
    cnt-=1
print("CASE 30 END")
print("======================================================")
#31. From the given list of list of elements produce the following output using nested for loop
#lst1=[[10,20],[30,40,50],[60,70,80]], calculate the sum of all number, calculate the min value and the max value of all the elements in the lst1.
print("CASE 31 BEGIN")
lst1=[[10,20],[30,40,50],[60,70,80]]
sum_val = 0
new_lst = []
for innr_lst in lst1:
    for i in innr_lst:
        sum_val += i
        new_lst.insert(len(new_lst),i)
print("Total sum of the elements is {} ".format(sum_val))
new_lst.sort(reverse=False)
print("Minimum value of the list is {} ".format(new_lst[0]))
print("Maximum value of the list is {} ".format(new_lst[len(new_lst)-1]))
print("CASE 31 END")
print("======================================================")
#32. Create a looping construct to create 3 tables upto 10 values. Output should be like this…
#1 x 3 = 3 ; 2 x 3 = 6; 3 x 3 = 9; 10 x 3 = 30
print("CASE 32 BEGIN")
i=3
j=1
tbl_lst=[]
while(j<11):
    print(f"The value of {i} table is {i} * {j} = {i*j}")
    tbl_lst.insert(len(tbl_lst),i*j)
    j+=1
print(tbl_lst)
print("CASE 32 END")
print("======================================================")
#33. Write def functions to make the above usecases (conditional from 11 to 15 and control statements 26 to 32) and the upcoming usecases more generic.
print("CASE 33 BEGIN")
#11. Write a program to find the greatest of 3 numbers
def get_greatest_num(first_value, second_value, third_value):
    if first_value > second_value and first_value > third_value:
        print(f"first value {first_value} is the greatest value then second {second_value} and third {third_value}")
    elif second_value > third_value:
        print(f"second value {second_value} is the greatest value then first {first_value} and third {third_value}")
    elif third_value > second_value:
        print(f"third value {third_value} is the greatest value then first {first_value} and second {second_value}")
    elif first_value == second_value and first_value != third_value:
        print(f" First and second values are equal, first {first_value}, second value {second_value}, and third {third_value}")
    elif second_value == third_value and second_value != first_value:
        print(f" second and third values are equal, first {first_value}, second value {second_value}, and third {third_value}")
    elif first_value == third_value and first_value != second_value:
        print(f" first and third values are equal, first {first_value}, second value {second_value}, and third {third_value}")
    else:
        print(f" All three values are equal, first {first_value}, second value {second_value}, and third {third_value}")
print("Greatest of 3 Numbers!!!!")
first_val = input("Enter the first value")
second_val = input("Enter the second value")
third_val = input("Enter the third value")
get_greatest_num(first_val,second_val,third_val)
print("End of Greatest of 3 Numbers!!!!")
#12. Write a single program to find the given number is even or whether it is negative and print the output as
# (the given number is even but not negative or the given number is not even but negative or the given number is neither negative nor even)
def check_odd_r_even_value(check_value):
    try:
        if check_value % 2 == 0:
            if check_value > 0:
                print(f"The given number is even and positive {check_value}")
            elif check_value < 0:
                print(f"The given number is even and negative {check_value}")
            else:
                print(f"The given number is zero {check_value}")
        else:
            if check_value > 0:
                print(f"The given number is odd and positive {check_value}")
            else:
                print(f"The given number is odd and negative {check_value}")
    except Exception as errormsg:
        print("Value Error in the input, it has to be only number!!!!")

print("Find the value is Even and Negative!!!!")
check_value = int(input("Enter the number:"))
check_odd_r_even_value(check_value)
print("End of check number fn!!!!")
# 13. Write a nested if then else to print the course fees - check if student choosing bigdata, then fees is 25000,
# if student choosing spark then fees is 15000, if the student choosing datascience then check if machinelearning then 25000 or if deep learning then 45000
# otherwise if both then 25000+25000.
def choose_course(sel_course):
    course_amt = [25000, 15000, 25000, 45000]
    if sel_course == 1:
       print("Your fees for BIGDATA is: " + str(course_amt[0]))
    elif sel_course == 2:
        print("Your fees for SPARK is: " + str(course_amt[1]))
    elif sel_course == 3:
        sub_sel_course = int(input("Enter the sub course \n"
                   "Choose 1 for MACHINELEARNING, 2 for DEEPLEARNING and 3 for both:"))
        if sub_sel_course == 1:
            print("Your fees for MACHINELEARNING is: " + str(course_amt[2]))
        elif sub_sel_course == 2:
            print("Your fees for DEEPLEARNING is: " + str(course_amt[3]))
        elif sub_sel_course == 3:
            amt = int(course_amt[2]) + int(course_amt[3])
            print("Your fees for MACHINELEARNING and DEEPLEARNING is: {} ".format(amt))
        else:
            print("Entered sub course is not valid!!!!!")
    else:
        print("Entered course is not valid!!!!!")
print("Start of course fee selection prog!!!!")
sel_course = int(input("Enter the course \n"
                   "From the below course choose 1 for BIGDATA, 2 for SPARK and 3 for DATASCIENCE: "))
choose_course(sel_course)
print("End of course fee selection prog!!!!")
# 14. Check whether the given string is palindrome or not (try to use some function like reverse).
# For eg: x="madam" and y=”madam”, if x matches with y then print as "palindrome" else "not a  palindrome".

def check_palindrome_value(check_string_value):
    len_value = len(check_string_value)
    i = 0
    palindrome:str = "true"
    for idx in range(0, len_value):
        if check_string_value[idx] == check_string_value[len_value - 1 - i]:
            palindrome = "true"
        else:
            palindrome = "false"
            break
        i = i + 1
    if palindrome == "true":
        print("The given string is palindrome")
    else:
        print("The given string is not palindrome")
print("Start palindrome prog!!!!!")
check_string_value = input("Enter the string value to check the palindrome")
check_palindrome_value(check_string_value)
print("End palindrome prog!!!!!")
#15. Check whether the val x=100 is an integer or string. (try to use some functions like str or upper function etc to execute this use case)
# or use isinstanceof(variablename,datatype) function.
def get_type_fn(x):
    if isinstance(x, int):
        print("Entered number is int!!")
    elif isinstance(x, type(x)):
        print("Entered number is string!!")
print("Start of type check fn")
x = str(input("Enter any value:"))
get_type_fn(x)
print("End of type check fn")
#26. Write a program using for loop to print even numbers and odd numbers in the below range of data (generate using range function) [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
# output should be with even as 6,8,10,12,14,16,18,20 and odd as 5,7,9,11,13,15,17,19.
def print_odd_n_even_num():
    evn_lst = []
    odd_lst = []
    for i in range(5,21):
        if i%2 == 0:
            evn_lst.insert(len(evn_lst), i)
        else:
            odd_lst.insert(len(odd_lst), i)
    print("The even numbers are {}".format(evn_lst))
    print("The odd numbers are {}".format(odd_lst))
print_odd_n_even_num()
#27. Write a while loop to loop from 0 till 21 with the increment of 3, the result should be exactly 3,6,9,12,15,18 and store this result in a list
def print_incr_of_3():
    i=0
    lst = []
    while(i<21):
        i+=3
        if(i<21):
            lst.insert(len(lst), i)
    print("The value of the lst is {}".format(lst))
print_incr_of_3()
#28. Write a for or while loop to print the cube of 4, result should be 4*4*4=64 (initiate some variable outside the loop with 4 and loop through 3 times to achieve the result)
def print_cube_val(val):
    i=1
    cube_value = 1
    while(i<=3):
        cube_value = cube_value * val
        i+=1
    print(cube_value)
val=int(input("Enter the value to cube:"))
print_cube_val(val)
#29. Create a list as sal_lst=[10000,20000,30000,10000,15000], loop through the list and add 1000 bonus to the salary and store in another list sal_bonus_lst=[11000,21000,31000,11000,16000]
#then store the bonus applied salary in another list where sal>11000
def bonus_sal_list():
    sal_lst=[10000,20000,30000,10000,15000]
    new_sal_lst=[]
    for i in sal_lst:
        new_sal_lst.insert(len(new_sal_lst), i + 1000)
    print(new_sal_lst)
bonus_sal_list()
#30. Write a do while loop to print “Inceptez technologies” n number of times as per the input you get from the user. Minimum it has to be printed at least one time regardless of the user input.
def print_company_name(cnt):

    while(True):
        print("Inceptez technologies")
        if(cnt==1 or cnt<=0):
            break;
        cnt-=1
cnt = int(input("Enter the number of times, you want to see the company name:"))
print_company_name(cnt)
#31. From the given list of list of elements produce the following output using nested for loop
#lst1=[[10,20],[30,40,50],[60,70,80]], calculate the sum of all number, calculate the min value and the max value of all the elements in the lst1.
def print_lst_value():
    lst1=[[10,20],[30,40,50],[60,70,80]]
    sum_val = 0
    new_lst = []
    for innr_lst in lst1:
        for i in innr_lst:
            sum_val += i
            new_lst.insert(len(new_lst),i)
    print("Total sum of the elements is {} ".format(sum_val))
    new_lst.sort(reverse=False)
    print("Minimum value of the list is {} ".format(new_lst[0]))
    print("Maximum value of the list is {} ".format(new_lst[len(new_lst)-1]))
print_lst_value()
#32. Create a looping construct to create 3 tables upto 10 values. Output should be like this…
#1 x 3 = 3 ; 2 x 3 = 6; 3 x 3 = 9; 10 x 3 = 30
def multiple_of_value(val):
    i=val
    j=1
    tbl_lst=[]
    while(j<11):
        print(f"The value of {i} table is {i} * {j} = {i*j}")
        tbl_lst.insert(len(tbl_lst),i*j)
        j+=1
    print(tbl_lst)
val = int(input("Enter the number to find the multiply tables:"))
multiple_of_value(val)
print("CASE 33 END")
print("======================================================")
#34. Call the above function created for usecase 11 using positional and keyword arguments methodologies
print("Case 34 BEGIN")
def get_greatest_num(first_value, second_value, third_value):
    if first_value > second_value and first_value > third_value:
        print(f"first value {first_value} is the greatest value then second {second_value} and third {third_value}")
    elif second_value > third_value:
        print(f"second value {second_value} is the greatest value then first {first_value} and third {third_value}")
    elif third_value > second_value:
        print(f"third value {third_value} is the greatest value then first {first_value} and second {second_value}")
    else:
        print(f" All three values are equal, first {first_value}, second value {second_value}, and third {third_value}")
first_val = input("Enter the first value")
second_val = input("Enter the second value")
third_val = input("Enter the third value")
get_greatest_num(first_value=first_val, second_value=second_val, third_value=third_val)
get_greatest_num(first_val,second_val,third_val)
print("Case 34 END")
print("======================================================")
#35. Write a function to create a calculator that accepts 3 arguments with the datatype of first 2 as int and 3rd one is str,
# based on the 3rd argument value passed as add/sub/div/mul perform either addition or subraction or multiplication or division respectively of argument 1 and 2
# then return the result to the calling environment.
# Create a default argument function to handle “if the 3rd argument is not passed then default it to add”.
print("Case 35 BEGIN")
def calc(first_val, second_val, operation):
    if operation == 'add':
        return first_val + second_val
    elif operation == 'sub':
        return first_val - second_val
    elif operation == 'mul':
        return first_val * second_val
    elif operation == 'div':
        return first_val / second_val
    else:
        return "Invalid operation"
first_value= int(input("Enter the first number: "))
second_value= int(input("Enter the second number: "))
operation= input("Enter the operation: add/sub/mul/div ")
result = calc(first_value, second_value, operation)
print(result)
print("Case 35 END")
print("======================================================")
#36. Convert the above calculator function to return complex type as tuple by calculating addition, subtraction, multiplication and division in one shot
# and return result with multiple types for eg. calc(10,3,all) should return (13,7,30,.33)
print("Case 36 BEGIN")
def calc(first_val, second_val, operation):
    if operation == 'add':
        return first_val + second_val
    elif operation == 'sub':
        return first_val - second_val
    elif operation == 'mul':
        return first_val * second_val
    elif operation == 'div':
        return first_val / second_val
    elif operation == 'all':
        return (first_val + second_val, first_val - second_val, first_val * second_val, first_val / second_val)
    else:
        return "Invalid operation"
first_value= int(input("Enter the first number: "))
second_value= int(input("Enter the second number: "))
operation= input("Enter the operation: add/sub/mul/div/all ")
result = calc(first_value, second_value, operation)
print(result)
print("Case 36 END")
print("======================================================")
#37. Create a method to accept a string like “inceptez technologies” and return the following values in multiple result types (capitalize, upper case, length of the string, number of words,
# ends with “s” or not, replace ‘e’ with ‘a’) for eg. the result should be like this.. (Inceptez Technologies, INCEPTEZ TECHNOLOGIES, 21, 2, True,incaptaz tachnologias)
print("Case 37 BEGIN")
def string_operation(val:str):
    return (val.capitalize(),val.upper(),len(val),len(val.split(" ")), val.endswith("s"),val.replace("e","a"))

tup = string_operation("inceptez technologies")
print(tup)
print("Case 37 END")
print("======================================================")
#Exception Handling
#41. Apply exception handler code in the above usecase number 35 to achieve the followings
#a.  If the calculator function is called with either the first or second argument as non integer values then raise Exception and call the calculator function with the type casted value
#for eg. calc("10",20, "add") in the except block of the exception handler we have to call the same function as calc(int("10"),20, "add") and return the result to the calling environment.
print("Case 41 BEGIN")
def calc(first_val, second_val, operation):
    if operation == 'add':
        return int(first_val) + int(second_val)
    elif operation == 'sub':
        return int(first_val) - int(second_val)
    elif operation == 'mul':
        return int(first_val) * int(second_val)
    elif operation == 'div':
        return int(first_val) / int(second_val)
    else:
        return "Invalid operation"
try:
    first_value = input("Enter the first number: ")
    second_value = input("Enter the second number: ")
    if (first_value == None or second_value == None):
        raise Exception
    operation= input("Enter the operation: add/sub/mul/div ")
    result = calc(first_value, second_value, operation)
    print(result)
except ValueError as ky:
    print("Error - Either first value or second value is not an integer!!")
    try:
        result = calc(int(first_value), int(second_value), operation)
        print(result)
    except ValueError:
        print("Error - Entered number is string and cannot be type casted!!")
except Exception:
    print("Error - Either first value or second value is not an entered!!")
print("Case 41 END")
print("======================================================")
